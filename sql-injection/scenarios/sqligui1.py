import requests
import time
import json
from bs4 import BeautifulSoup
import tkinter as tk
from tkinter import filedialog, messagebox

# Step 1: Fetch Payloads
def fetch_payloads(payloads_file_path):
    with open(payloads_file_path, 'r') as file:
        payloads = json.load(file)
    return payloads["sqli"]

# Step 2: Log in to the target site
def login(session, url, username, password):
    login_page = session.get(url)
    soup = BeautifulSoup(login_page.content, 'html.parser')
    form = soup.find('form')
    data = {}
    for input_tag in form.find_all('input'):
        if input_tag.get('name') == 'username':
            data[input_tag.get('name')] = username
        elif input_tag.get('name') == 'password':
            data[input_tag.get('name')] = password
        elif input_tag.get('name'):
            data[input_tag.get('name')] = input_tag.get('value')
    
    response = session.post(url, data=data)
    return response

# Step 3: Set security level to low
def set_security_level(session, url):
    security_page = session.get(url)
    soup = BeautifulSoup(security_page.content, 'html.parser')
    form = soup.find('form')
    data = {}
    for input_tag in form.find_all('input'):
        if input_tag.get('name') and input_tag.get('type') != 'submit':
            data[input_tag.get('name')] = input_tag.get('value')
    
    for select_tag in form.find_all('select'):
        data[select_tag.get('name')] = 'low'
    
    # Include the submit button
    for input_tag in form.find_all('input', {'type': 'submit'}):
        data[input_tag.get('name')] = input_tag.get('value')
    
    response = session.post(url, data=data)
    return response

# Step 4: Fetch Form Parameters
def fetch_form_params(session, url):
    response = session.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    form = soup.find('form')
    if not form:
        print("No form found on the page.")
        return {}
    inputs = form.find_all('input')
    params = {}
    for input_tag in inputs:
        if input_tag.get('name'):
            params[input_tag.get('name')] = ''
    return params

# Step 5: Test Payloads
def test_payloads(session, payloads, params, target_url):
    results = []
    for payload in payloads:
        for param in params.keys():
            original_value = params[param]
            params[param] = payload
            start_time = time.time()
            response = session.get(target_url, params=params)
            response_time = time.time() - start_time
            content = response.content.decode()

            if "You have an error in your SQL syntax" in content or "Warning: mysql_fetch_array()" in content:
                classification = classify_payload(payload)
                results.append((payload, param, classification, "Detected via SQL error message"))
            elif response_time > 5:  # Time-based payload detection
                classification = classify_payload(payload)
                results.append((payload, param, classification, "Detected via response delay"))

            params[param] = original_value
    return results

# Step 6: Classify Payloads
def classify_payload(payload):
    basic_sql_injection_patterns = ["' OR '1'='1", "' OR 1=1", "'--", "'#", "'/*"]
    error_based_patterns = ["CONVERT", "EXTRACTVALUE", "UTL_INADDR"]
    time_based_patterns = ["SLEEP", "BENCHMARK", "WAITFOR DELAY"]
    union_based_patterns = ["UNION SELECT"]

    # Check for Basic SQL Injection
    for pattern in basic_sql_injection_patterns:
        if pattern in payload:
            return "Basic SQL Injection (B)"

    # Check for Error-Based SQL Injection
    for pattern in error_based_patterns:
        if pattern in payload:
            return "Error-Based SQL Injection (E)"

    # Check for Time-Based SQL Injection
    for pattern in time_based_patterns:
        if pattern in payload:
            return "Time-Based SQL Injection (T)"

    # Check for Union-Based SQL Injection
    for pattern in union_based_patterns:
        if pattern in payload:
            return "Union-Based SQL Injection (U)"

    return "Unknown"

# Step 7: Fetch Vulnerable Line
def fetch_vulnerable_line(session, source_url, param):
    response = session.get(source_url)
    soup = BeautifulSoup(response.content, 'html.parser')
    code_div = soup.find('div', {'class': 'code'})
    if not code_div:
        print("No <div> with class 'code' found in the source code page.")
        return "Vulnerable line not found."

    code_block = code_div.find('code')
    if not code_block:
        print("No <code> tag found inside the <div class='code'>.")
        return "Vulnerable line not found."

    code_lines = code_block.text.split('\n')
    for line in code_lines:
        if param in line:
            return line.strip()
    return "Vulnerable line not found."

# Step 8: Print Results
def print_results(results, session, source_code_url):
    output = ""
    if not results:
        output = "No vulnerabilities found."
    else:
        for result in results:
            payload, param, classification, detection_method = result
            vulnerable_line = fetch_vulnerable_line(session, source_code_url, param)
            output += f"Payload: {payload}\n"
            output += f"Vulnerable Parameter: {param}\n"
            output += f"Classification: {classification}\n"
            output += f"Detection Method: {detection_method}\n"
            output += f"Vulnerable Line: {vulnerable_line}\n"
            output += "-" * 80 + "\n"
    return output

# GUI Implementation
def run_gui():
    def start_testing():
        login_url = login_url_entry.get()
        security_url = security_url_entry.get()
        target_url = target_url_entry.get()
        source_code_url = source_code_url_entry.get()
        username = username_entry.get()
        password = password_entry.get()
        payloads_file_path = payloads_file_path_entry.get()

        print("Fetching payloads...")
        payloads = fetch_payloads(payloads_file_path)
        print("Fetched payloads.")
        
        with requests.Session() as session:
            print("Logging in...")
            login_response = login(session, login_url, username, password)
            if "Welcome" not in login_response.text:
                messagebox.showerror("Login failed", "Failed to login to the target site.")
                return
            print("Login successful.")

            print("Setting security level to low...")
            security_response = set_security_level(session, security_url)
            if "Security level set to low" not in security_response.text:
                messagebox.showerror("Security level failed", "Failed to set security level.")
                return
            print("Security level set to low.")

            print("Fetching form parameters...")
            params = fetch_form_params(session, target_url)
            if not params:
                messagebox.showerror("No parameters found", "No parameters found to test.")
                return
            
            print("Testing payloads...")
            results = test_payloads(session, payloads, params, target_url)
            
            print("Printing results...")
            result_output = print_results(results, session, source_code_url)
            result_text.delete(1.0, tk.END)
            result_text.insert(tk.END, result_output)

    root = tk.Tk()
    root.title("SQL Injection Testing Tool")

    tk.Label(root, text="Login URL:").grid(row=0, column=0, sticky=tk.W)
    login_url_entry = tk.Entry(root, width=50)
    login_url_entry.grid(row=0, column=1, padx=5, pady=5)
    login_url_entry.insert(0, "http://127.0.0.1/DVWA/login.php")

    tk.Label(root, text="Security URL:").grid(row=1, column=0, sticky=tk.W)
    security_url_entry = tk.Entry(root, width=50)
    security_url_entry.grid(row=1, column=1, padx=5, pady=5)
    security_url_entry.insert(0, "http://127.0.0.1/DVWA/security.php")

    tk.Label(root, text="Target URL:").grid(row=2, column=0, sticky=tk.W)
    target_url_entry = tk.Entry(root, width=50)
    target_url_entry.grid(row=2, column=1, padx=5, pady=5)
    target_url_entry.insert(0, "http://127.0.0.1/DVWA/vulnerabilities/sqli/")

    tk.Label(root, text="Source Code URL:").grid(row=3, column=0, sticky=tk.W)
    source_code_url_entry = tk.Entry(root, width=50)
    source_code_url_entry.grid(row=3, column=1, padx=5, pady=5)
    source_code_url_entry.insert(0, "http://127.0.0.1/DVWA/vulnerabilities/view_source.php?id=sqli&security=low")

    tk.Label(root, text="Username:").grid(row=4, column=0, sticky=tk.W)
    username_entry = tk.Entry(root, width=50)
    username_entry.grid(row=4, column=1, padx=5, pady=5)
    username_entry.insert(0, "admin")

    tk.Label(root, text="Password:").grid(row=5, column=0, sticky=tk.W)
    password_entry = tk.Entry(root, width=50)
    password_entry.grid(row=5, column=1, padx=5, pady=5)
    password_entry.insert(0, "password")

    tk.Label(root, text="Payloads File Path:").grid(row=6, column=0, sticky=tk.W)
    payloads_file_path_entry = tk.Entry(root, width=50)
    payloads_file_path_entry.grid(row=6, column=1, padx=5, pady=5)
    payloads_file_path_entry.insert(0, "/home/kali/Desktop/payloads.json")

    tk.Button(root, text="Start Testing", command=start_testing).grid(row=7, column=0, columnspan=2, pady=10)

    result_text = tk.Text(root, width=100, height=30)
    result_text.grid(row=8, column=0, columnspan=2, padx=10, pady=10)

    root.mainloop()

if __name__ == "__main__":
    run_gui()
