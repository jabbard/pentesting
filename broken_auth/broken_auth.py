import requests

# bWAPP URL and credentials
bwapp_url = "http://localhost/bWAPP"
login_url = f"{bwapp_url}/login.php"
default_username = "bee"
weak_passwords = ["123456", "password", "12345678", "qwerty", "abc123", "bug"]

def format_vulnerability(vuln_type, description, details):
    return f"Vulnerability Type: {vuln_type}\nDescription: {description}\nDetails: {details}\n" + ("-" * 80) + "\n"

def test_weak_passwords():
    session = requests.Session()
    output = ""
    for password in weak_passwords:
        login_data = {"login": default_username, "password": password, "form": "submit"}
        response = session.post(login_url, data=login_data)
        if "Welcome" in response.text:
            output += format_vulnerability("Weak Password Login", f"Weak password '{password}' accepted.", f"Username: {default_username}, Password: {password}")
            break  # Stop after the first successful login
    return output

def test_brute_force_protection():
    session = requests.Session()
    output = ""
    login_attempts = 10
    login_data = {"login": default_username, "password": "wrongpassword", "form": "submit"}
    success_attempts = 0
    for attempt in range(1, login_attempts + 1):
        response = session.post(login_url, data=login_data)
        if "Account locked" in response.text or "Too many failed attempts" in response.text:
            output += format_vulnerability("Brute Force Protection", "Account lockout or protection detected.", f"Locked after {attempt} attempts.")
            break
        elif "Welcome" in response.text:
            success_attempts += 1
            output += format_vulnerability("Brute Force Protection Bypass", "Successful login after multiple failed attempts.", f"Logged in on attempt {attempt} with incorrect password.")
            break

    if success_attempts == 0:
        output += format_vulnerability("Brute Force Protection", "No brute force protection detected.", f"No account lockout after {login_attempts} failed attempts.")
    
    return output

def test_session_fixation():
    session = requests.Session()
    output = ""

    # Force a session by making a request
    session.get(bwapp_url)

    session_cookie = session.cookies.get_dict().get("PHPSESSID", None)
    if session_cookie:
        output += format_vulnerability("Session Management", "Session ID is predictable or can be reused.", f"Session ID: {session_cookie}")
    else:
        output += format_vulnerability("Session Management", "No session ID detected.", "")
    
    return output

def run_broken_authentication_tests():
    output = ""

    try:
        # Run Weak Passwords Test
        output += "=== Weak Passwords Test ===\n"
        output += test_weak_passwords()
        output += "\n"

        # Run Brute Force Protection Test
        output += "=== Brute Force Protection Test ===\n"
        output += test_brute_force_protection()
        output += "\n"

        # Run Session Fixation Test
        output += "=== Session Fixation Test ===\n"
        output += test_session_fixation()
        output += "\n"

    except Exception as e:
        output = f"An error occurred while running the broken authentication tests: {e}"

    return output

if __name__ == "__main__":
    print(run_broken_authentication_tests())
