from flask import Flask, render_template, request, redirect, url_for, flash
import subprocess
import json
import os

app = Flask(__name__)
app.secret_key = 'supersecretkey'

# Define the path for file uploads
UPLOAD_FOLDER = 'uploads/'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Load the payloads from the JSON file
payloads_file = os.path.abspath('C:\Swinburne\TAP\pentesting\pentesting\gui\payloads.json')  # Use absolute path for payloads.json
with open(payloads_file, 'r', encoding='utf-8') as file:
    payloads = json.load(file)['payloads']

# Function to test if an executable is vulnerable to a given payload
def is_vulnerable(executable_path, payload):
    try:
        payload_str = str(payload)
        result = subprocess.run(
            [executable_path],
            input=payload_str.encode(),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=3
        )
        print(f"Running payload: {payload_str}")  # Log the payload being tested
        if b"Error: Buffer overflow detected" in result.stdout:
            return True
        else:
            return False
    except subprocess.TimeoutExpired:
        # If the app takes too long to respond, it might be vulnerable
        return True
    except Exception as e:
        print(f"Error with payload: {payload_str}, Error: {str(e)}")
        return False

# Route for Buffer Overflow testing
@app.route('/buffer_overflow', methods=['GET', 'POST'])
def buffer_overflow():
    if request.method == 'POST':
        file = request.files['executable']
        if file:
            # Save the uploaded file
            filename = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
            file.save(filename)

            # Ensure the executable has the right permissions
            os.chmod(filename, 0o755)

            # List to store vulnerable payloads
            vulnerable_payloads = []
            for payload in payloads:
                if is_vulnerable(filename, payload):
                    vulnerable_payloads.append(payload)

            if vulnerable_payloads:
                return render_template('buffer_overflow.html', 
                                        vulnerable=True, 
                                        vulnerable_payloads=vulnerable_payloads)
            else:
                return render_template('buffer_overflow.html', vulnerable=False)
    
    return render_template('buffer_overflow.html', vulnerable=None)

if __name__ == "__main__":
    app.run(debug=True)
