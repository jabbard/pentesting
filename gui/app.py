from flask import Flask, render_template
import subprocess
import os
import sys

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/sqli')
def sqli():
    return render_template('sqli.html')

@app.route('/ufi')
def ufi():
    # Get the absolute path to the script in the unauthorized directory
    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../unauthorized/unauthorized.py')
    
    try:
        # Run the script using subprocess
        result = subprocess.run(['python3', script_path], capture_output=True, text=True)
        print(sys.executable)
        # Handle the result
        if result.returncode == 0:
            output = result.stdout
        else:
            output = f"Error occurred: {result.stderr}"
    
    except Exception as e:
        output = f"An error occurred: {e}"
    
    # Pass the output to the template
    return render_template('ufi.html', script_output=output)

@app.route('/csrf')
def csrf():
    # Get the absolute path to the script in the unauthorized directory
    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../csrf/csrf.py')
    
    try:
        # Run the script using subprocess
        result = subprocess.run(['python3', script_path], capture_output=True, text=True)
        print(sys.executable)
        # Handle the result
        if result.returncode == 0:
            output = result.stdout
        else:
            output = f"Error occurred: {result.stderr}"
    
    except Exception as e:
        output = f"An error occurred: {e}"
    
    # Pass the output to the template
    return render_template('csrf.html', script_output=output)

@app.route('/ssrf')
def ssrf():
    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../ssrf/ssrf.py')
    
    try:
        # Run the script using subprocess
        result = subprocess.run(['python3', script_path], capture_output=True, text=True)
        print(sys.executable)
        # Handle the result
        if result.returncode == 0:
            output = result.stdout
        else:
            output = f"Error occurred: {result.stderr}"
    
    except Exception as e:
        output = f"An error occurred: {e}"
    
    # Pass the output to the template
    return render_template('ssrf.html', script_output=output)


@app.route('/deserialization')
def deserialization():
    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../deserialization/deserialization.py')
    
    try:
        # Run the script using subprocess
        result = subprocess.run(['python3', script_path], capture_output=True, text=True)
        print(sys.executable)
        # Handle the result
        if result.returncode == 0:
            output = result.stdout
        else:
            output = f"Error occurred: {result.stderr}"
    
    except Exception as e:
        output = f"An error occurred: {e}"
    
    # Pass the output to the template
    return render_template('deserialization.html', script_output=output)
# Add more routes for other vulnerabilities as needed

@app.route('/broken_auth')
def broken_auth():
    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../broken_auth/broken_auth.py')
    
    try:
        result = subprocess.run(['python3', script_path], capture_output=True, text=True)
        if result.returncode == 0:
            output = result.stdout
        else:
            output = f"Error occurred: {result.stderr}"
    
    except Exception as e:
        output = f"An error occurred: {e}"
    
    return render_template('broken_auth.html', script_output=output)


@app.route('/xss')
def xss():
    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../xss/xss.py')
    
    try:
        result = subprocess.run(['python3', script_path], capture_output=True, text=True)
        if result.returncode == 0:
            output = result.stdout
        else:
            output = f"Error occurred: {result.stderr}"
    
    except Exception as e:
        output = f"An error occurred: {e}"
    
    return render_template('xss.html', script_output=output)


@app.route('/broken_acc')
def broken_acc():
    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../broken_acc/broken_acc.py')
    
    try:
        result = subprocess.run(['python3', script_path], capture_output=True, text=True)
        if result.returncode == 0:
            output = result.stdout
        else:
            output = f"Error occurred: {result.stderr}"
    
    except Exception as e:
        output = f"An error occurred: {e}"
    
    return render_template('broken_acc.html', script_output=output)

@app.route('/sde')
def sde():
    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../sde/sde.py')
    
    try:
        result = subprocess.run(['python3', script_path], capture_output=True, text=True)
        if result.returncode == 0:
            output = result.stdout
        else:
            output = f"Error occurred: {result.stderr}"
    
    except Exception as e:
        output = f"An error occurred: {e}"
    
    return render_template('sde.html', script_output=output)

if __name__ == "__main__":
    app.run(debug=True)
