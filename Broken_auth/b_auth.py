import requests

# bWAPP URL and credentials
bwapp_url = "http://localhost/bWAPP"
login_url = f"{bwapp_url}/login.php"
password_change_url = f"{bwapp_url}/password_change.php"
default_username = "bee"
weak_passwords = ["123456", "password", "12345678", "qwerty", "abc123","bug"]

# Start a session
session = requests.Session()

# Function to print vulnerability information
def print_vulnerability(vuln_type, description, details):
    print(f"Vulnerability Type: {vuln_type}")
    print(f"Description: {description}")
    print(f"Details: {details}")
    print("-" * 80)

# 1. Test for Weak Passwords
for password in weak_passwords:
    login_data = {
        "login": default_username,
        "password": password,
        "form": "submit"
    }
    response = session.post(login_url, data=login_data)
    
    if "Welcome" in response.text:
        print_vulnerability("Weak Password Login", f"Weak password '{password}' accepted.", f"Username: {default_username}, Password: {password}")
        session.get(f"{bwapp_url}/logout.php")  # Logout after successful login
        break
    else:
        print(f"Password '{password}' did not succeed for user '{default_username}'.")

# 2. Brute Force Protection Bypass
login_attempts = 10
login_data = {
    "login": default_username,
    "password": "wrongpassword",
    "form": "submit"
}
success_attempts = 0

for attempt in range(1, login_attempts + 1):
    response = session.post(login_url, data=login_data)
    
    if "Account locked" in response.text or "Too many failed attempts" in response.text:
        print_vulnerability("Brute Force Protection", "Account lockout or protection detected.", f"Locked after {attempt} attempts.")
        break
    elif "Welcome" in response.text:
        success_attempts += 1
        print_vulnerability("Brute Force Protection Bypass", "Successful login after multiple failed attempts.", f"Logged in on attempt {attempt} with incorrect password.")
        session.get(f"{bwapp_url}/logout.php")  # Logout after successful login
        break

if success_attempts == 0:
    print(f"No brute force protection detected after {login_attempts} failed attempts.")

# 3. Session Management Issues (Session Fixation)
session_cookie = session.cookies.get_dict().get("PHPSESSID", None)

if session_cookie:
    print_vulnerability("Session Management", "Session ID is predictable or can be reused.", f"Session ID: {session_cookie}")
else:
    print("No session ID detected.")

# Logout
session.get(f"{bwapp_url}/logout.php")
print("Logged out.")
