import requests
import re
import os

# Base URL for bWAPP
base_url = "http://localhost/bWAPP"

# Function to set the security level
def set_security_level(level):
    url = f"{base_url}/security_level_set.php"
    response = requests.post(url, data={"security_level": level, "form_security_level": "submit"})
    if response.status_code == 200:
        print(f"[INFO] Security level set to {level} successfully.")
    else:
        print(f"[ERROR] Failed to set security level to {level}. Status code: {response.status_code}")

# Scenario 1: Insecure Login Forms - Multiple Hard-Coded Credentials
def test_insecure_login_form():
    url = f"{base_url}/ba_insecure_login_1.php"
    
    # Test multiple hard-coded credentials
    credentials = [
        {"login": "tonystark", "password": "I am Iron Man"},
        {"login": "admin", "password": "admin123"},
        {"login": "user", "password": "password"},
        {"login": "bee", "password": "bug"},
    ]
    
    for cred in credentials:
        response = requests.post(url, data={"login": cred["login"], "password": cred["password"], "form": "submit"})
        if "Successful login!" in response.text:
            print(f"[VULNERABILITY] Insecure login form accepted hard-coded credentials: {cred['login']} / {cred['password']}")
        else:
            print(f"[INFO] Login with credentials {cred['login']} / {cred['password']} failed.")


    
# Scenario 2: Weak Passwords - Larger Dictionary
def test_weak_passwords():
    url = f"{base_url}/ba_weak_pwd.php"
    login = "test"
    
    # Larger dictionary of weak passwords
    passwords = [
        "123456", "password", "123456789", "12345678", "12345", "1234567",
        "1234", "1234567890", "admin", "qwerty", "111111", "123123",
        "abc123", "letmein", "welcome", "monkey", "test", "test123", "Test123"
    ]

    for password in passwords:
        response = requests.post(url, data={"login": login, "password": password, "form": "submit"})
        if "Successful login!" in response.text:
            print(f"[VULNERABILITY] Weak password '{password}' accepted for login!")
        else:
            print(f"[INFO] Password '{password}' was not accepted.")


# Scenario 3: Forgotten Function - Test with Known Valid Emails
def test_forgotten_function(known_email):
    url = f"{base_url}/ba_forgotten.php"

    # Sending a POST request with a known valid email
    response = requests.post(url, data={"email": known_email, "action": "forgot"})
    
    if "Invalid user!" in response.text:
        print("[VULNERABILITY] Email enumeration possible!")
    elif "Your secret:" in response.text:
        print("[VULNERABILITY] Information disclosure via forgotten function!")
    else:
        print("[INFO] No vulnerabilities found in forgotten function.")

 #Function to scan PHP files for vulnerable lines of code
def detect_vulnerabilities_in_file(file_path):
    vulnerabilities = []
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.readlines()
    
    for i, line in enumerate(content):
        # Scenario 1: Insecure Login Forms - Hard-Coded Credentials
        if re.search(r"login == 'tonystark' .* password == 'I am Iron Man'", line):
            vulnerabilities.append(f"[Scenario 1] Hard-Coded Credentials: {file_path} Line {i+1}: {line.strip()}")

        # Scenario 2: Weak Passwords - Hard-Coded Passwords
        if re.search(r"password = ", line):
            vulnerabilities.append(f"[Scenario 2] Hard-Coded Password: {file_path} Line {i+1}: {line.strip()}")

        # Scenario 3: Forgotten Function - Email Enumeration and Information Disclosure
        if re.search(r"SELECT \* FROM users WHERE email", line):
            vulnerabilities.append(f"[Scenario 3] Email Enumeration: {file_path} Line {i+1}: {line.strip()}")
        if re.search(r"Your secret: <b>", line):
            vulnerabilities.append(f"[Scenario 3] Information Disclosure: {file_path} Line {i+1}: {line.strip()}")

    return vulnerabilities

def scan_directory_for_vulnerabilities(directory):
    all_vulnerabilities = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".php"):
                file_path = os.path.join(root, file)
                vulnerabilities = detect_vulnerabilities_in_file(file_path)
                all_vulnerabilities.extend(vulnerabilities)
    
    return all_vulnerabilities

def main():
    # Set the security level to low (0)
    set_security_level("0")

    print("\nStarting Insecure Login Form Test")
    test_insecure_login_form()

    print("\nStarting Weak Passwords Test")
    test_weak_passwords()

    print("\nStarting Forgot function Attack")
    known_email = "bwapp-bee@mailinator.com"
    test_forgotten_function(known_email)

    # Directory to scan for vulnerabilities
    php_directory = "/var/www/html/bWAPP"  
    print("\nFinding Vulnerable Lines of Code")
    vulnerabilities = scan_directory_for_vulnerabilities(php_directory)
    
    if vulnerabilities:
        print("\nVulnerabilities found:")
        for vulnerability in vulnerabilities:
            print(vulnerability)
    else:
        print("\nNo vulnerabilities found.")

if __name__ == "__main__":
    main()
